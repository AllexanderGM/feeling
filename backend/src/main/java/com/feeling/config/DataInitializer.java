package com.feeling.config;

import com.feeling.infrastructure.entities.user.*;
import com.feeling.infrastructure.repositories.user.*;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.CommandLineRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

@Component
@RequiredArgsConstructor
public class DataInitializer implements CommandLineRunner {

    private static final Logger logger = LoggerFactory.getLogger(DataInitializer.class);

    private final IUserRoleRepository userRoleRepository;
    private final IUserRepository userRepository;
    private final IUserAttributeRepository userAttributeRepository;
    private final IUserCategoryInterestRepository userCategoryInterestRepository;
    private final IUserTagRepository userTagRepository;
    private final PasswordEncoder passwordEncoder;
    private final IUserCategoryInterestRepository categoryInterestRepository;

    @Value("${spring.security.user.name}")
    private String adminEmail;

    @Value("${spring.security.user.password}")
    private String adminPassword;

    @Override
    public void run(String... args) throws Exception {
        logger.info("Inicializando datos b√°sicos de Feeling...");

        initializeUserRoles();
        initializeCategoryInterests();
        initializeUserAttributes();
        initializeCommonTags();
        createAdminUser();

        logger.info("Inicializaci√≥n de datos completada exitosamente");
    }

    // ==============================
    // ROLES DE USUARIO
    // ==============================
    private void initializeUserRoles() {
        logger.info("Inicializando roles de usuario...");

        Arrays.stream(UserRoleList.values()).forEach(role -> {
            if (userRoleRepository.findByUserRoleList(role).isEmpty()) {
                UserRole userRole = new UserRole(role);
                userRoleRepository.save(userRole);
                logger.info("Rol creado: {}", role.name());
            }
        });
    }

    // ==============================
    // CATEGOR√çAS DE INTER√âS
    // ==============================
    private void initializeCategoryInterests() {
        logger.info("Inicializando categor√≠as de inter√©s...");

        // ESSENCE
        createCategoryIfNotExists(
                UserCategoryInterestList.ESSENCE,
                "Essence",
                "Conexiones aut√©nticas para relaciones heterosexuales",
                "üíù",
                "Essence es el espacio ideal para personas que buscan relaciones heterosexuales aut√©nticas y significativas. Aqu√≠ puedes conectar con personas que comparten tus intereses y valores para formar v√≠nculos duraderos.",
                "Personas heterosexuales que buscan relaciones aut√©nticas, desde citas casuales hasta relaciones de largo plazo.",
                List.of(
                        "Conexiones basadas en compatibilidad real",
                        "Algoritmos dise√±ados para relaciones heterosexuales",
                        "Comunidad enfocada en relaciones serias",
                        "Herramientas para conocer gustos e intereses"
                ),
                1
        );

        // ROUSE
        createCategoryIfNotExists(
                UserCategoryInterestList.ROUSE,
                "Rouse",
                "Espacio inclusivo para la comunidad LGBTI+",
                "üè≥Ô∏è‚Äçüåà",
                "Rouse es un espacio seguro e inclusivo dise√±ado especialmente para la comunidad LGBTI+. Aqu√≠ puedes ser aut√©ntico/a y conectar con personas que entienden y celebran tu identidad.",
                "Miembros de la comunidad LGBTI+ que buscan conexiones aut√©nticas en un ambiente seguro y comprensivo.",
                List.of(
                        "Ambiente 100% inclusivo y respetuoso",
                        "Opciones de identidad de g√©nero y orientaci√≥n flexibles",
                        "Comunidad diversa y acogedora",
                        "Herramientas de seguridad y privacidad reforzadas"
                ),
                2
        );

        // SPIRIT
        createCategoryIfNotExists(
                UserCategoryInterestList.SPIRIT,
                "Spirit",
                "Comunidad cristiana con valores compartidos",
                "‚úùÔ∏è",
                "Spirit es una comunidad para personas cristianas que desean conectar con otros que comparten su fe y valores. Un espacio donde la espiritualidad es parte fundamental de las relaciones.",
                "Personas cristianas que buscan relaciones donde la fe y los valores espirituales sean prioritarios.",
                List.of(
                        "Comunidad centrada en valores cristianos",
                        "Conexiones basadas en fe compartida",
                        "Ambiente respetuoso y familiar",
                        "Enfoque en relaciones con prop√≥sito y valores"
                ),
                3
        );

        logger.info("Inicializaci√≥n de categor√≠as de inter√©s completada.");
    }

    private void createCategoryIfNotExists(
            UserCategoryInterestList categoryEnum,
            String name,
            String description,
            String icon,
            String fullDescription,
            String targetAudience,
            List<String> features,
            int displayOrder) {

        // CORREGIDO: Usar el m√©todo correcto
        Optional<UserCategoryInterest> existing = userCategoryInterestRepository.findByCategoryInterestEnum(categoryEnum);

        if (existing.isEmpty()) {
            UserCategoryInterest category = UserCategoryInterest.builder()
                    .categoryInterestEnum(categoryEnum)
                    .name(name)
                    .description(description)
                    .icon(icon)
                    .fullDescription(fullDescription)
                    .targetAudience(targetAudience)
                    .features(features)
                    .isActive(true)
                    .displayOrder(displayOrder)
                    .build();

            userCategoryInterestRepository.save(category);
            logger.info("Categor√≠a de inter√©s creada: {}", name);
        } else {
            logger.info("Categor√≠a de inter√©s ya existe: {}", name);
        }
    }

    // ==============================
    // ATRIBUTOS DE USUARIO
    // ==============================
    private void initializeUserAttributes() {
        logger.info("Inicializando atributos de usuario...");

        // G√©nero
        createAttributesIfNotExists("GENDER", Arrays.asList(
                new AttributeData("MALE", "Masculino", "Identidad de g√©nero masculina", 1),
                new AttributeData("FEMALE", "Femenino", "Identidad de g√©nero femenina", 2),
                new AttributeData("NON_BINARY", "No binario", "Identidad de g√©nero no binaria", 3),
                new AttributeData("OTHER", "Otro", "Otra identidad de g√©nero", 4),
                new AttributeData("PREFER_NOT_TO_SAY", "Prefiero no decir", "Prefiere no especificar", 5)
        ));

        // Estado civil
        createAttributesIfNotExists("MARITAL_STATUS", Arrays.asList(
                new AttributeData("SINGLE", "Soltero/a", "Estado civil soltero", 1),
                new AttributeData("MARRIED", "Casado/a", "Estado civil casado", 2),
                new AttributeData("DIVORCED", "Divorciado/a", "Estado civil divorciado", 3),
                new AttributeData("WIDOWED", "Viudo/a", "Estado civil viudo", 4),
                new AttributeData("SEPARATED", "Separado/a", "Estado civil separado", 5),
                new AttributeData("IN_RELATIONSHIP", "En una relaci√≥n", "En una relaci√≥n", 6)
        ));

        // Color de ojos
        createAttributesIfNotExists("EYE_COLOR", Arrays.asList(
                new AttributeData("BROWN", "Marrones", "Ojos de color marr√≥n", 1),
                new AttributeData("BLUE", "Azules", "Ojos de color azul", 2),
                new AttributeData("GREEN", "Verdes", "Ojos de color verde", 3),
                new AttributeData("HAZEL", "Avellana", "Ojos de color avellana", 4),
                new AttributeData("GRAY", "Grises", "Ojos de color gris", 5),
                new AttributeData("BLACK", "Negros", "Ojos de color negro", 6)
        ));

        // Color de cabello
        createAttributesIfNotExists("HAIR_COLOR", Arrays.asList(
                new AttributeData("BLACK", "Negro", "Cabello negro", 1),
                new AttributeData("BROWN", "Casta√±o", "Cabello casta√±o", 2),
                new AttributeData("BLONDE", "Rubio", "Cabello rubio", 3),
                new AttributeData("RED", "Pelirrojo", "Cabello pelirrojo", 4),
                new AttributeData("GRAY", "Canoso", "Cabello canoso", 5),
                new AttributeData("WHITE", "Blanco", "Cabello blanco", 6),
                new AttributeData("OTHER", "Otro", "Otro color de cabello", 7)
        ));

        // Tipo de cuerpo
        createAttributesIfNotExists("BODY_TYPE", Arrays.asList(
                new AttributeData("SLIM", "Delgado/a", "Constituci√≥n delgada", 1),
                new AttributeData("ATHLETIC", "Atl√©tico/a", "Constituci√≥n atl√©tica", 2),
                new AttributeData("AVERAGE", "Promedio", "Constituci√≥n promedio", 3),
                new AttributeData("CURVY", "Con curvas", "Constituci√≥n con curvas", 4),
                new AttributeData("PLUS_SIZE", "Talla grande", "Constituci√≥n de talla grande", 5)
        ));

        createAttributesIfNotExists("EDUCATION_LEVEL", Arrays.asList(
                new AttributeData("PRIMARY", "Primaria", "Educaci√≥n primaria completa", 1),
                new AttributeData("SECONDARY", "Secundaria", "Educaci√≥n secundaria completa", 2),
                new AttributeData("HIGH_SCHOOL", "Bachillerato", "Educaci√≥n de bachillerato completa", 3),
                new AttributeData("TECHNICIAN", "T√©cnico o Tecn√≥logo", "Educaci√≥n t√©cnica o tecn√≥loga", 4),
                new AttributeData("VOCATIONAL", "Profesional", "T√≠tulo profesional o Licenciatura", 5),
                new AttributeData("MASTER", "Maestr√≠a", "T√≠tulo universitario de maestr√≠a", 6),
                new AttributeData("DOCTORATE", "Doctorado", "T√≠tulo universitario de doctorado", 7),
                new AttributeData("OTHER", "Otro nivel educativo", "Otro nivel educativo no especificado", 8)
        ));

        // Religi√≥n
        createAttributesIfNotExists("RELIGION", Arrays.asList(
                new AttributeData("CHRISTIAN", "Cristiano/a", "Religi√≥n cristiana", 1),
                new AttributeData("CATHOLIC", "Cat√≥lico/a", "Religi√≥n cat√≥lica", 2),
                new AttributeData("PROTESTANT", "Protestante", "Religi√≥n protestante", 3),
                new AttributeData("EVANGELICAL", "Evang√©lico/a", "Religi√≥n evang√©lica", 4),
                new AttributeData("PENTECOSTAL", "Pentecostal", "Religi√≥n pentecostal", 5),
                new AttributeData("ORTHODOX", "Ortodoxo/a", "Religi√≥n ortodoxa", 6),
                new AttributeData("JEWISH", "Jud√≠o/a", "Religi√≥n jud√≠a", 7),
                new AttributeData("MUSLIM", "Musulm√°n/a", "Religi√≥n musulmana", 8),
                new AttributeData("BUDDHIST", "Budista", "Religi√≥n budista", 9),
                new AttributeData("HINDU", "Hind√∫", "Religi√≥n hind√∫", 10),
                new AttributeData("SPIRITUAL", "Espiritual", "Persona espiritual sin religi√≥n espec√≠fica", 11),
                new AttributeData("AGNOSTIC", "Agn√≥stico/a", "Persona agn√≥stica", 12),
                new AttributeData("ATHEIST", "Ateo/a", "Persona atea", 13),
                new AttributeData("OTHER", "Otra", "Otra religi√≥n", 14),
                new AttributeData("PREFER_NOT_TO_SAY", "Prefiero no decir", "Prefiere no especificar", 15)
        ));

        // Roles sexuales (espec√≠fico para ROUSE)
        createAttributesIfNotExists("SEXUAL_ROLE", Arrays.asList(
                new AttributeData("TOP", "Activo", "Rol sexual activo", 1),
                new AttributeData("BOTTOM", "Pasivo", "Rol sexual pasivo", 2),
                new AttributeData("VERSATILE", "Vers√°til", "Rol sexual vers√°til", 3),
                new AttributeData("SIDE", "Side", "Prefiere actividades sin penetraci√≥n", 4)
        ));

        // Tipos de relaci√≥n (espec√≠fico para ROUSE)
        createAttributesIfNotExists("RELATIONSHIP_TYPE", Arrays.asList(
                new AttributeData("MONOGAMOUS", "Mon√≥gamo", "Relaci√≥n mon√≥gama", 1),
                new AttributeData("OPEN", "Abierta", "Relaci√≥n abierta", 2),
                new AttributeData("POLYAMOROUS", "Poliamorosa", "Relaci√≥n poliamorosa", 3),
                new AttributeData("CASUAL", "Casual", "Relaci√≥n casual", 4),
                new AttributeData("FRIENDS_WITH_BENEFITS", "Amigos con beneficios", "Amigos con beneficios", 5),
                new AttributeData("EXPLORING", "Explorando", "Explorando opciones", 6)
        ));
    }

    private void createAttributesIfNotExists(String attributeType, List<AttributeData> attributesData) {
        attributesData.forEach(data -> {
            // Verificar si ya existe
            boolean exists = userAttributeRepository.findByCodeAndAttributeType(data.code, attributeType).isPresent();

            if (!exists) {
                UserAttribute attribute = UserAttribute.builder()
                        .code(data.code)
                        .name(data.name)
                        .attributeType(attributeType)
                        .description(data.description)
                        .displayOrder(data.displayOrder)
                        .active(true)
                        .createdAt(LocalDateTime.now())
                        .updatedAt(LocalDateTime.now())
                        .build();

                userAttributeRepository.save(attribute);
                logger.debug("Atributo creado: {} - {}", attributeType, data.name);
            }
        });
    }

    // ==============================
    // TAGS COMUNES
    // ==============================
    private void initializeCommonTags() {
        logger.info("Inicializando tags comunes...");

        // Verificar si ya existen tags para evitar duplicados
        if (userTagRepository.count() > 0) {
            logger.info("Los tags comunes ya est√°n inicializados");
            return;
        }

        String systemEmail = "system@feeling.com";
        List<String> commonTags = Arrays.asList(
                // Intereses generales
                "m√∫sica", "deportes", "viajes", "cocina", "lectura", "cine", "arte", "fotograf√≠a",
                "baile", "yoga", "fitness", "naturaleza", "playa", "monta√±a", "aventura",

                // Estilo de vida
                "fiestero", "casero", "social", "introvertido", "extrovertido", "aventurero",
                "tranquilo", "activo", "rom√°ntico", "divertido", "serio", "espont√°neo",

                // Hobbies espec√≠ficos
                "gaming", "netflix", "series", "anime", "manga", "comics", "videojuegos",
                "streaming", "podcast", "m√∫sica en vivo", "conciertos", "festivales",

                // Comida y bebida
                "caf√©", "vino", "cerveza", "vegetariano", "vegano", "foodie", "reposter√≠a",
                "parrilla", "comida italiana", "comida asi√°tica", "comida mexicana",

                // Actividades
                "senderismo", "ciclismo", "running", "nataci√≥n", "surf", "escalada",
                "esqu√≠", "patinaje", "tenis", "f√∫tbol", "b√°squet", "voleibol",

                // Intereses intelectuales
                "libros", "filosof√≠a", "historia", "ciencia", "tecnolog√≠a", "programaci√≥n",
                "idiomas", "escritura", "poes√≠a", "teatro", "literatura",

                // Espirituales/Religiosos (para SPIRIT)
                "oraci√≥n", "biblia", "iglesia", "adoraci√≥n", "servicio", "misiones",
                "grupos peque√±os", "retiros", "conferencias", "m√∫sica cristiana"
        );

        commonTags.forEach(tagName -> {
            try {
                if (userTagRepository.findByNameIgnoreCase(tagName).isEmpty()) {
                    UserTag tag = UserTag.builder()
                            .name(tagName.toLowerCase())
                            .createdBy(systemEmail)
                            .createdAt(LocalDateTime.now())
                            .usageCount(0L)
                            .lastUsed(LocalDateTime.now())
                            .build();

                    userTagRepository.save(tag);
                    logger.debug("Tag com√∫n creado: {}", tagName);
                }
            } catch (Exception e) {
                logger.error("Error al crear tag '{}': {}", tagName, e.getMessage());
                // Continuar con el siguiente tag en lugar de fallar completamente
            }
        });

        logger.info("Inicializaci√≥n de tags comunes completada");
    }

    // ==============================
    // USUARIO ADMINISTRADOR
    // ==============================
    private void createAdminUser() {
        logger.info("Verificando usuario administrador...");

        if (userRepository.findByEmail(this.adminEmail).isEmpty()) {
            UserRole adminRole = userRoleRepository.findByUserRoleList(UserRoleList.ADMIN)
                    .orElseThrow(() -> new RuntimeException("Rol ADMIN no encontrado"));

            User admin = User.builder()
                    .name("Administrador")
                    .lastname("Feeling")
                    .email(this.adminEmail)
                    .password(passwordEncoder.encode(this.adminPassword))
                    .userRole(adminRole)
                    .verified(true)
                    .profileComplete(true)
                    .dateOfBirth(LocalDate.of(1990, 1, 1))
                    .createdAt(LocalDateTime.now())
                    .updatedAt(LocalDateTime.now())
                    .allowNotifications(true)
                    .showMeInSearch(false)
                    .availableAttempts(999)
                    .build();

            userRepository.save(admin);
            logger.info("Usuario administrador creado: {}", this.adminEmail);
        }
    }

    // ==============================
    // CLASE AUXILIAR PARA DATOS DE ATRIBUTOS
    // ==============================
    private static class AttributeData {
        public final String code;
        public final String name;
        public final String description;
        public final Integer displayOrder;

        public AttributeData(String code, String name, String description, Integer displayOrder) {
            this.code = code;
            this.name = name;
            this.description = description;
            this.displayOrder = displayOrder;
        }
    }
}
