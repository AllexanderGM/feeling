package com.feeling.config;

import com.feeling.infrastructure.entities.user.*;
import com.feeling.infrastructure.repositories.user.*;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.CommandLineRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;

@Component
@RequiredArgsConstructor
public class DataInitializer implements CommandLineRunner {

    private static final Logger logger = LoggerFactory.getLogger(DataInitializer.class);

    private final IUserRoleRepository userRoleRepository;
    private final IUserRepository userRepository;
    private final IUserAttributeRepository userAttributeRepository;
    private final IUserCategoryInterestRepository userCategoryInterestRepository;
    private final IUserTagRepository userTagRepository;
    private final PasswordEncoder passwordEncoder;
    private final IUserCategoryInterestRepository categoryInterestRepository;

    // Usar valores por defecto para el administrador del sistema
    private final String adminEmail = "admin@feeling.com";
    private final String adminPassword = "Feeling2024!";

    @Override
    public void run(String... args) throws Exception {
        logger.info("Inicializando datos b√°sicos de Feeling...");

        initializeUserRoles();
        initializeCategoryInterests();
        initializeUserAttributes();
        initializeCommonTags();
        createAdminUser();
        createTestUsers();

        logger.info("Inicializaci√≥n de datos completada exitosamente");
    }

    // ==============================
    // ROLES DE USUARIO
    // ==============================
    private void initializeUserRoles() {
        logger.info("Inicializando roles de usuario...");

        Arrays.stream(UserRoleList.values()).forEach(role -> {
            if (userRoleRepository.findByUserRoleList(role).isEmpty()) {
                UserRole userRole = new UserRole(role);
                userRoleRepository.save(userRole);
                logger.info("Rol creado: {}", role.name());
            }
        });
    }

    // ==============================
    // CATEGOR√çAS DE INTER√âS
    // ==============================
    private void initializeCategoryInterests() {
        logger.info("Inicializando categor√≠as de inter√©s...");

        // ESSENCE
        createCategoryIfNotExists(
                UserCategoryInterestList.ESSENCE,
                "Essence",
                "Conexiones aut√©nticas para relaciones heterosexuales",
                "‚ú®",
                "Essence es el espacio ideal para personas que buscan relaciones heterosexuales aut√©nticas y significativas. Aqu√≠ puedes conectar con personas que comparten tus intereses y valores para formar v√≠nculos duraderos.",
                "Personas heterosexuales que buscan relaciones aut√©nticas, desde citas casuales hasta relaciones de largo plazo.",
                List.of(
                        "Conexiones basadas en compatibilidad real",
                        "Algoritmos dise√±ados para relaciones heterosexuales",
                        "Comunidad enfocada en relaciones serias",
                        "Herramientas para conocer gustos e intereses"
                ),
                1
        );

        // ROUSE
        createCategoryIfNotExists(
                UserCategoryInterestList.ROUSE,
                "Rouse",
                "Espacio inclusivo para la comunidad LGBTI+",
                "üè≥Ô∏è‚Äçüåà",
                "Rouse es un espacio seguro e inclusivo dise√±ado especialmente para la comunidad LGBTI+. Aqu√≠ puedes ser aut√©ntico/a y conectar con personas que entienden y celebran tu identidad.",
                "Miembros de la comunidad LGBTI+ que buscan conexiones aut√©nticas en un ambiente seguro y comprensivo.",
                List.of(
                        "Ambiente 100% inclusivo y respetuoso",
                        "Opciones de identidad de g√©nero y orientaci√≥n flexibles",
                        "Comunidad diversa y acogedora",
                        "Herramientas de seguridad y privacidad reforzadas"
                ),
                2
        );

        // SPIRIT
        createCategoryIfNotExists(
                UserCategoryInterestList.SPIRIT,
                "Spirit",
                "Comunidad cristiana con valores compartidos",
                "‚úùÔ∏è",
                "Spirit es una comunidad para personas cristianas que desean conectar con otros que comparten su fe y valores. Un espacio donde la espiritualidad es parte fundamental de las relaciones.",
                "Personas cristianas que buscan relaciones donde la fe y los valores espirituales sean prioritarios.",
                List.of(
                        "Comunidad centrada en valores cristianos",
                        "Conexiones basadas en fe compartida",
                        "Ambiente respetuoso y familiar",
                        "Enfoque en relaciones con prop√≥sito y valores"
                ),
                3
        );

        logger.info("Inicializaci√≥n de categor√≠as de inter√©s completada.");
    }

    private void createCategoryIfNotExists(
            UserCategoryInterestList categoryEnum,
            String name,
            String description,
            String icon,
            String fullDescription,
            String targetAudience,
            List<String> features,
            int displayOrder) {

        // CORREGIDO: Usar el m√©todo correcto
        Optional<UserCategoryInterest> existing = userCategoryInterestRepository.findByCategoryInterestEnum(categoryEnum);

        if (existing.isEmpty()) {
            UserCategoryInterest category = UserCategoryInterest.builder()
                    .categoryInterestEnum(categoryEnum)
                    .name(name)
                    .description(description)
                    .icon(icon)
                    .fullDescription(fullDescription)
                    .targetAudience(targetAudience)
                    .isActive(true)
                    .displayOrder(displayOrder)
                    .build();

            // Guardar sin features primero para evitar lazy loading issues
            UserCategoryInterest savedCategory = userCategoryInterestRepository.save(category);
            
            // Establecer features despu√©s del save si es necesario
            if (features != null && !features.isEmpty()) {
                savedCategory.setFeatures(new ArrayList<>(features));
                userCategoryInterestRepository.save(savedCategory);
            }
            
            logger.info("Categor√≠a de inter√©s creada: {}", name);
        } else {
            logger.info("Categor√≠a de inter√©s ya existe: {}", name);
        }
    }

    // ==============================
    // ATRIBUTOS DE USUARIO
    // ==============================
    private void initializeUserAttributes() {
        logger.info("Inicializando atributos de usuario...");

        // G√©nero
        createAttributesIfNotExists("GENDER", Arrays.asList(
                new AttributeData("MALE", "Masculino", "Identidad de g√©nero masculina", "man", 1),
                new AttributeData("FEMALE", "Femenino", "Identidad de g√©nero femenina", "woman", 2),
                new AttributeData("NON_BINARY", "No binario", "Identidad de g√©nero no binaria", "transgender", 3),
                new AttributeData("OTHER", "Otro", "Otra identidad de g√©nero", "diversity_3", 4),
                new AttributeData("PREFER_NOT_TO_SAY", "Prefiero no decir", "Prefiere no especificar", "visibility_off", 5)
        ));

        // Estado civil
        createAttributesIfNotExists("MARITAL_STATUS", Arrays.asList(
                new AttributeData("SINGLE", "Soltero/a", "Estado civil soltero", 1),
                new AttributeData("MARRIED", "Casado/a", "Estado civil casado", 2),
                new AttributeData("DIVORCED", "Divorciado/a", "Estado civil divorciado", 3),
                new AttributeData("WIDOWED", "Viudo/a", "Estado civil viudo", 4),
                new AttributeData("SEPARATED", "Separado/a", "Estado civil separado", 5),
                new AttributeData("IN_RELATIONSHIP", "En una relaci√≥n", "En una relaci√≥n", 6)
        ));

        // Color de ojos
        createAttributesIfNotExists("EYE_COLOR", Arrays.asList(
                new AttributeData("BROWN", "Marrones", "Ojos de color marr√≥n", "#D2691E", 1),
                new AttributeData("BLUE", "Azules", "Ojos de color azul", "#1E90FF", 2),
                new AttributeData("GREEN", "Verdes", "Ojos de color verde", "#32CD32", 3),
                new AttributeData("HAZEL", "Avellana", "Ojos de color avellana", "#DAA520", 4),
                new AttributeData("GRAY", "Grises", "Ojos de color gris", "#6495ED", 5),
                new AttributeData("BLACK", "Negros", "Ojos de color negro", "#2F2F2F", 6),
                new AttributeData("AMBER", "√Åmbar", "Ojos de color √°mbar", "#FFBF00", 7)
        ));

        // Color de cabello
        createAttributesIfNotExists("HAIR_COLOR", Arrays.asList(
                new AttributeData("BLACK", "Negro", "Cabello negro", "#1C1C1C", 1),
                new AttributeData("DARK_BROWN", "Casta√±o Oscuro", "Cabello casta√±o oscuro", "#654321", 2),
                new AttributeData("BROWN", "Casta√±o", "Cabello casta√±o", "#8B4513", 3),
                new AttributeData("LIGHT_BROWN", "Casta√±o Claro", "Cabello casta√±o claro", "#CD853F", 4),
                new AttributeData("DARK_BLONDE", "Rubio Oscuro", "Cabello rubio oscuro", "#B8860B", 5),
                new AttributeData("BLONDE", "Rubio", "Cabello rubio", "#FFD700", 6),
                new AttributeData("LIGHT_BLONDE", "Rubio Claro", "Cabello rubio claro", "#F0E68C", 7),
                new AttributeData("STRAWBERRY_BLONDE", "Rubio Fresa", "Cabello rubio fresa", "#FF7F50", 8),
                new AttributeData("RED", "Pelirrojo", "Cabello pelirrojo", "#FF4500", 9),
                new AttributeData("AUBURN", "Cobrizo", "Cabello cobrizo", "#A52A2A", 10),
                new AttributeData("GRAY", "Canoso", "Cabello canoso", "#C0C0C0", 11),
                new AttributeData("WHITE", "Blanco", "Cabello blanco", "#F8F8FF", 12),
                new AttributeData("OTHER", "Otro", "Otro color de cabello", "palette", 13)
        ));

        // Tipo de cuerpo
        createAttributesIfNotExists("BODY_TYPE", Arrays.asList(
                new AttributeData("SLIM", "Delgado/a", "Constituci√≥n delgada", "straighten", 1),
                new AttributeData("ATHLETIC", "Atl√©tico/a", "Constituci√≥n atl√©tica", "fitness_center", 2),
                new AttributeData("AVERAGE", "Promedio", "Constituci√≥n promedio", "person", 3),
                new AttributeData("CURVY", "Con curvas", "Constituci√≥n con curvas", "waving_hand", 4),
                new AttributeData("PLUS_SIZE", "Talla grande", "Constituci√≥n de talla grande", "sentiment_satisfied", 5),
                new AttributeData("PREFER_NOT_TO_SAY", "Prefiero no decir", "Prefiere no especificar", "visibility_off", 6)
        ));

        // Nivel educativo
        createAttributesIfNotExists("EDUCATION_LEVEL", Arrays.asList(
                new AttributeData("PRIMARY", "Primaria", "Educaci√≥n primaria completa", 1),
                new AttributeData("SECONDARY", "Secundaria", "Educaci√≥n secundaria completa", 2),
                new AttributeData("HIGH_SCHOOL", "Bachillerato", "Educaci√≥n de bachillerato completa", 3),
                new AttributeData("TECHNICIAN", "T√©cnico o Tecn√≥logo", "Educaci√≥n t√©cnica o tecn√≥loga", 4),
                new AttributeData("VOCATIONAL", "Profesional", "T√≠tulo profesional o Licenciatura", 5),
                new AttributeData("MASTER", "Maestr√≠a", "T√≠tulo universitario de maestr√≠a", 6),
                new AttributeData("DOCTORATE", "Doctorado", "T√≠tulo universitario de doctorado", 7),
                new AttributeData("OTHER", "Otro nivel educativo", "Otro nivel educativo no especificado", 8)
        ));

        // Religi√≥n
        createAttributesIfNotExists("RELIGION", Arrays.asList(
                new AttributeData("CHRISTIAN", "Cristiano/a", "Religi√≥n cristiana", "church", 1),
                new AttributeData("CATHOLIC", "Cat√≥lico/a", "Religi√≥n cat√≥lica", "church", 2),
                new AttributeData("PROTESTANT", "Protestante", "Religi√≥n protestante", "menu_book", 3),
                new AttributeData("EVANGELICAL", "Evang√©lico/a", "Religi√≥n evang√©lica", "campaign", 4),
                new AttributeData("PENTECOSTAL", "Pentecostal", "Religi√≥n pentecostal", "whatshot", 5),
                new AttributeData("ORTHODOX", "Ortodoxo/a", "Religi√≥n ortodoxa", "account_balance", 6),
                new AttributeData("JEWISH", "Jud√≠o/a", "Religi√≥n jud√≠a", "brightness_empty", 7),
                new AttributeData("MUSLIM", "Musulm√°n/a", "Religi√≥n musulmana", "mosque", 8),
                new AttributeData("BUDDHIST", "Budista", "Religi√≥n budista", "self_improvement", 9),
                new AttributeData("HINDU", "Hind√∫", "Religi√≥n hind√∫", "spa", 10),
                new AttributeData("SPIRITUAL", "Espiritual", "Persona espiritual sin religi√≥n espec√≠fica", "auto_awesome", 11),
                new AttributeData("AGNOSTIC", "Agn√≥stico/a", "Persona agn√≥stica", "help", 12),
                new AttributeData("ATHEIST", "Ateo/a", "Persona atea", "block", 13),
                new AttributeData("OTHER", "Otra", "Otra religi√≥n", "public", 14),
                new AttributeData("PREFER_NOT_TO_SAY", "Prefiero no decir", "Prefiere no especificar", "visibility_off", 15)
        ));

        // Roles sexuales (espec√≠fico para ROUSE)
        createAttributesIfNotExists("SEXUAL_ROLE", Arrays.asList(
                new AttributeData("TOP", "Activo", "Rol sexual activo", "keyboard_arrow_up", 1),
                new AttributeData("BOTTOM", "Pasivo", "Rol sexual pasivo", "keyboard_arrow_down", 2),
                new AttributeData("VERSATILE", "Vers√°til", "Rol sexual vers√°til", "swap_vert", 3),
                new AttributeData("SIDE", "Side", "Prefiere actividades sin penetraci√≥n", "swap_horiz", 4)
        ));

        // Tipos de relaci√≥n (espec√≠fico para ROUSE)
        createAttributesIfNotExists("RELATIONSHIP_TYPE", Arrays.asList(
                new AttributeData("MONOGAMOUS", "Mon√≥gamo", "Relaci√≥n mon√≥gama", "favorite", 1),
                new AttributeData("OPEN", "Abierta", "Relaci√≥n abierta", "link", 2),
                new AttributeData("POLYAMOROUS", "Poliamorosa", "Relaci√≥n poliamorosa", "group", 3),
                new AttributeData("CASUAL", "Casual", "Relaci√≥n casual", "sentiment_satisfied", 4),
                new AttributeData("FRIENDS_WITH_BENEFITS", "Amigos con beneficios", "Amigos con beneficios", "handshake", 5),
                new AttributeData("EXPLORING", "Explorando", "Explorando opciones", "search", 6)
        ));
    }

    private void createAttributesIfNotExists(String attributeType, List<AttributeData> attributesData) {
        attributesData.forEach(data -> {
            // Verificar si ya existe
            boolean exists = userAttributeRepository.findByCodeAndAttributeType(data.code, attributeType).isPresent();

            if (!exists) {
                UserAttribute attribute = UserAttribute.builder()
                        .code(data.code)
                        .name(data.name)
                        .attributeType(attributeType)
                        .description(data.description)
                        .detail(data.detail)
                        .displayOrder(data.displayOrder)
                        .active(true)
                        .createdAt(LocalDateTime.now())
                        .updatedAt(LocalDateTime.now())
                        .build();

                userAttributeRepository.save(attribute);
                logger.debug("Atributo creado: {} - {}", attributeType, data.name);
            }
        });
    }

    // ==============================
    // TAGS COMUNES
    // ==============================
    private void initializeCommonTags() {
        logger.info("Inicializando tags comunes...");

        // Verificar si ya existen tags para evitar duplicados
        if (userTagRepository.count() > 0) {
            logger.info("Los tags comunes ya est√°n inicializados");
            return;
        }

        String systemEmail = "system@feeling.com";
        List<String> commonTags = Arrays.asList(
                // Intereses generales
                "m√∫sica", "deportes", "viajes", "cocina", "lectura", "cine", "arte", "fotograf√≠a",
                "baile", "yoga", "fitness", "naturaleza", "playa", "monta√±a", "aventura",

                // Estilo de vida
                "fiestero", "casero", "social", "introvertido", "extrovertido", "aventurero",
                "tranquilo", "activo", "rom√°ntico", "divertido", "serio", "espont√°neo",

                // Hobbies espec√≠ficos
                "gaming", "netflix", "series", "anime", "manga", "comics", "videojuegos",
                "streaming", "podcast", "m√∫sica en vivo", "conciertos", "festivales",

                // Comida y bebida
                "caf√©", "vino", "cerveza", "vegetariano", "vegano", "foodie", "reposter√≠a",
                "parrilla", "comida italiana", "comida asi√°tica", "comida mexicana",

                // Actividades
                "senderismo", "ciclismo", "running", "nataci√≥n", "surf", "escalada",
                "esqu√≠", "patinaje", "tenis", "f√∫tbol", "b√°squet", "voleibol",

                // Intereses intelectuales
                "libros", "filosof√≠a", "historia", "ciencia", "tecnolog√≠a", "programaci√≥n",
                "idiomas", "escritura", "poes√≠a", "teatro", "literatura",

                // Espirituales/Religiosos (para SPIRIT)
                "oraci√≥n", "biblia", "iglesia", "adoraci√≥n", "servicio", "misiones",
                "grupos peque√±os", "retiros", "conferencias", "m√∫sica cristiana"
        );

        commonTags.forEach(tagName -> {
            try {
                if (userTagRepository.findByNameIgnoreCase(tagName).isEmpty()) {
                    UserTag tag = UserTag.builder()
                            .name(tagName.toLowerCase())
                            .createdBy(systemEmail)
                            .createdAt(LocalDateTime.now())
                            .usageCount(0L)
                            .lastUsed(LocalDateTime.now())
                            .build();

                    userTagRepository.save(tag);
                    logger.debug("Tag com√∫n creado: {}", tagName);
                }
            } catch (Exception e) {
                logger.error("Error al crear tag '{}': {}", tagName, e.getMessage());
                // Continuar con el siguiente tag en lugar de fallar completamente
            }
        });

        logger.info("Inicializaci√≥n de tags comunes completada");
    }

    // ==============================
    // USUARIO ADMINISTRADOR
    // ==============================
    private void createAdminUser() {
        logger.info("Verificando usuario administrador...");

        if (userRepository.findByEmail(this.adminEmail).isEmpty()) {
            UserRole adminRole = userRoleRepository.findByUserRoleList(UserRoleList.ADMIN)
                    .orElseThrow(() -> new RuntimeException("Rol ADMIN no encontrado"));

            // Obtener atributos necesarios para completar el perfil
            UserAttribute defaultGender = userAttributeRepository.findByCodeAndAttributeType("MALE", "GENDER")
                    .orElse(null);
            UserAttribute defaultReligion = userAttributeRepository.findByCodeAndAttributeType("CATHOLIC", "RELIGION")
                    .orElse(null);
            UserCategoryInterest defaultCategory = userCategoryInterestRepository
                    .findByCategoryInterestEnum(UserCategoryInterestList.ESSENCE)
                    .orElse(null);

            User admin = User.builder()
                    .name("Administrador")
                    .lastName("Feeling")
                    .email(this.adminEmail)
                    .password(passwordEncoder.encode(this.adminPassword))
                    .userRole(adminRole)
                    .verified(true)
                    .dateOfBirth(LocalDate.of(1990, 1, 1))
                    .createdAt(LocalDateTime.now())
                    .updatedAt(LocalDateTime.now())
                    .allowNotifications(true)
                    .showMeInSearch(false)
                    .availableAttempts(999)
                    // CAMPOS REQUERIDOS PARA COMPLETAR EL PERFIL
                    .document("0000000000")
                    .phone("3000000000")
                    .phoneCode("+57")
                    .country("Colombia")
                    .city("Bogot√°")
                    .description("Administrador del sistema Feeling")
                    .height(175)
                    .gender(defaultGender)
                    .categoryInterest(defaultCategory)
                    .religion(defaultReligion)
                    // Preferencias por defecto
                    .agePreferenceMin(18)
                    .agePreferenceMax(80)
                    .locationPreferenceRadius(100)
                    // Configuraci√≥n de privacidad
                    .showAge(true)
                    .showLocation(true)
                    .build();

            userRepository.save(admin);

            // Crear tags b√°sicos para el administrador si no existen
            try {
                UserTag adminTag = userTagRepository.findByNameIgnoreCase("administrador")
                        .orElseGet(() -> userTagRepository.save(UserTag.builder()
                                .name("administrador")
                                .createdBy(adminEmail)
                                .createdAt(LocalDateTime.now())
                                .usageCount(1L)
                                .lastUsed(LocalDateTime.now())
                                .build()));
                UserTag systemTag = userTagRepository.findByNameIgnoreCase("sistema")
                        .orElseGet(() -> userTagRepository.save(UserTag.builder()
                                .name("sistema")
                                .createdBy(adminEmail)
                                .createdAt(LocalDateTime.now())
                                .usageCount(1L)
                                .lastUsed(LocalDateTime.now())
                                .build()));

                logger.info("Tags b√°sicos del administrador creados/verificados");
            } catch (Exception e) {
                logger.warn("No se pudieron crear/verificar tags del administrador: {}", e.getMessage());
            }

            logger.info("Usuario administrador creado con perfil completo: {}", this.adminEmail);
        } else {
            // Si el administrador ya existe, verificar si necesita actualizaci√≥n de campos
            User existingAdmin = userRepository.findByEmail(this.adminEmail).get();
            boolean needsUpdate = false;

            // Verificar y actualizar campos faltantes
            if (existingAdmin.getDocument() == null) {
                existingAdmin.setDocument("0000000000");
                needsUpdate = true;
            }
            if (existingAdmin.getPhone() == null) {
                existingAdmin.setPhone("3000000000");
                needsUpdate = true;
            }
            if (existingAdmin.getPhoneCode() == null) {
                existingAdmin.setPhoneCode("+57");
                needsUpdate = true;
            }
            if (existingAdmin.getCountry() == null) {
                existingAdmin.setCountry("Colombia");
                needsUpdate = true;
            }
            if (existingAdmin.getCity() == null) {
                existingAdmin.setCity("Bogot√°");
                needsUpdate = true;
            }
            if (existingAdmin.getDescription() == null) {
                existingAdmin.setDescription("Administrador del sistema Feeling");
                needsUpdate = true;
            }
            if (existingAdmin.getHeight() == null) {
                existingAdmin.setHeight(175);
                needsUpdate = true;
            }
            // Set default image if not already present
            if (existingAdmin.getImages() == null) {
                existingAdmin.setImages(List.of("https://via.placeholder.com/400x400/6366F1/FFFFFF?text=Admin"));
                needsUpdate = true;
            }
            if (existingAdmin.getGender() == null) {
                UserAttribute defaultGender = userAttributeRepository.findByCodeAndAttributeType("MALE", "GENDER").orElse(null);
                if (defaultGender != null) {
                    existingAdmin.setGender(defaultGender);
                    needsUpdate = true;
                }
            }
            if (existingAdmin.getCategoryInterest() == null) {
                UserCategoryInterest defaultCategory = userCategoryInterestRepository
                        .findByCategoryInterestEnum(UserCategoryInterestList.ESSENCE).orElse(null);
                if (defaultCategory != null) {
                    existingAdmin.setCategoryInterest(defaultCategory);
                    needsUpdate = true;
                }
            }
            if (existingAdmin.getReligion() == null) {
                UserAttribute defaultReligion = userAttributeRepository.findByCodeAndAttributeType("CATHOLIC", "RELIGION").orElse(null);
                if (defaultReligion != null) {
                    existingAdmin.setReligion(defaultReligion);
                    needsUpdate = true;
                }
            }
            if (existingAdmin.getAgePreferenceMin() == null) {
                existingAdmin.setAgePreferenceMin(18);
                needsUpdate = true;
            }
            if (existingAdmin.getAgePreferenceMax() == null) {
                existingAdmin.setAgePreferenceMax(80);
                needsUpdate = true;
            }
            if (existingAdmin.getLocationPreferenceRadius() == null) {
                existingAdmin.setLocationPreferenceRadius(100);
                needsUpdate = true;
            }

            if (needsUpdate) {
                userRepository.save(existingAdmin);
                logger.info("Usuario administrador actualizado con campos faltantes: {}", this.adminEmail);
            }
        }
    }

    // ==============================
    // CLASE AUXILIAR PARA DATOS DE ATRIBUTOS
    // ==============================
    private static class AttributeData {
        public final String code;
        public final String name;
        public final String description;
        public final String detail;
        public final Integer displayOrder;

        // Constructor con detail expl√≠cito
        public AttributeData(String code, String name, String description, String detail, Integer displayOrder) {
            this.code = code;
            this.name = name;
            this.description = description;
            this.detail = detail;
            this.displayOrder = displayOrder;
        }

        // Constructor que mantiene compatibilidad (detail = null)
        public AttributeData(String code, String name, String description, Integer displayOrder) {
            this.code = code;
            this.name = name;
            this.description = description;
            this.detail = null;
            this.displayOrder = displayOrder;
        }
    }

    // ==============================
    // USUARIOS DE PRUEBA
    // ==============================
    private void createTestUsers() {
        logger.info("Creando usuarios de prueba...");
        
        // Solo crear en desarrollo y si no existen muchos usuarios ya
        long userCount = userRepository.count();
        if (userCount > 5) {
            logger.info("Ya existen {} usuarios, saltando creaci√≥n de usuarios de prueba", userCount);
            return;
        }

        try {
            // Obtener datos necesarios
            UserRole clientRole = userRoleRepository.findByUserRoleList(UserRoleList.CLIENT)
                .orElseThrow(() -> new RuntimeException("Rol CLIENT no encontrado"));
                
            List<UserCategoryInterest> categories = userCategoryInterestRepository.findAll();
            List<UserAttribute> genders = userAttributeRepository.findByAttributeTypeAndActiveTrue("GENDER");
            List<UserAttribute> eyeColors = userAttributeRepository.findByAttributeTypeAndActiveTrue("EYE_COLOR");
            List<UserAttribute> hairColors = userAttributeRepository.findByAttributeTypeAndActiveTrue("HAIR_COLOR");
            List<UserAttribute> bodyTypes = userAttributeRepository.findByAttributeTypeAndActiveTrue("BODY_TYPE");
            List<UserTag> availableTags = userTagRepository.findAll();

            int usuariosCreados = 0;
            Random random = new Random();

            // Crear 30 usuarios
            for (int i = 0; i < 30; i++) {
                try {
                    User user = crearUsuarioAleatorio(random, clientRole, categories, genders, 
                                                    eyeColors, hairColors, bodyTypes, availableTags);
                    
                    // Verificar que el email no exista
                    if (userRepository.findByEmail(user.getEmail()).isEmpty()) {
                        userRepository.save(user);
                        usuariosCreados++;
                        logger.debug("Usuario de prueba creado: {} {}", user.getName(), user.getLastName());
                    }
                    
                } catch (Exception e) {
                    logger.error("Error creando usuario de prueba {}: {}", i, e.getMessage());
                }
            }

            logger.info("Se crearon {} usuarios de prueba", usuariosCreados);
            
        } catch (Exception e) {
            logger.error("Error en creaci√≥n de usuarios de prueba: {}", e.getMessage());
        }
    }

    private User crearUsuarioAleatorio(Random random, UserRole clientRole, 
                                     List<UserCategoryInterest> categories,
                                     List<UserAttribute> genders,
                                     List<UserAttribute> eyeColors,
                                     List<UserAttribute> hairColors,
                                     List<UserAttribute> bodyTypes,
                                     List<UserTag> availableTags) {
        
        // Datos para generar usuarios falsos
        String[] nombresMasculinos = {
            "Alejandro", "Carlos", "Diego", "Eduardo", "Fernando", "Gabriel", "Hugo", "Iv√°n", 
            "Javier", "Kevin", "Luis", "Miguel", "Nicol√°s", "Oscar", "Pablo", "Rafael", 
            "Santiago", "Tom√°s", "V√≠ctor", "William", "Andr√©s", "Daniel", "Sergio", "Ricardo"
        };

        String[] nombresFemeninos = {
            "Alejandra", "Beatriz", "Carmen", "Diana", "Elena", "Fernanda", "Gabriela", "Helena",
            "Isabel", "Julia", "Karen", "Laura", "Mar√≠a", "Natalia", "Olivia", "Patricia",
            "Rosa", "Sofia", "Teresa", "Valentina", "Andrea", "Carolina", "Daniela", "Marcela"
        };

        String[] apellidos = {
            "Garc√≠a", "Rodr√≠guez", "Gonz√°lez", "Fern√°ndez", "L√≥pez", "Mart√≠nez", "S√°nchez", "P√©rez",
            "G√≥mez", "Mart√≠n", "Jim√©nez", "Ruiz", "Hern√°ndez", "D√≠az", "Moreno", "Mu√±oz",
            "√Ålvarez", "Romero", "Alonso", "Guti√©rrez", "Navarro", "Torres", "Dom√≠nguez", "V√°zquez"
        };

        String[][] ciudadesCol = {
            {"Colombia", "Bogot√°", "Cundinamarca"},
            {"Colombia", "Medell√≠n", "Antioquia"},
            {"Colombia", "Cali", "Valle del Cauca"},
            {"Colombia", "Barranquilla", "Atl√°ntico"},
            {"Colombia", "Cartagena", "Bol√≠var"},
            {"Colombia", "Bucaramanga", "Santander"},
            {"Colombia", "Pereira", "Risaralda"},
            {"Colombia", "Manizales", "Caldas"}
        };

        String[] descripciones = {
            "Me encanta viajar y conocer nuevas culturas. Busco personas aut√©nticas.",
            "Apasionado por la m√∫sica y el arte. Me gusta conversar sobre la vida.",
            "Amo la naturaleza y los deportes al aire libre. Siempre dispuesto a nuevas experiencias.",
            "Foodie empedernido. Las mejores conversaciones se dan alrededor de una buena comida.",
            "Lector voraz y amante del cine. Busco conexiones profundas.",
            "Empresario en crecimiento. Balanceo trabajo y vida personal.",
            "Artista en el alma, pr√°ctico en la vida. Me gusta crear e inspirar.",
            "Deportista por pasi√≥n, optimista por naturaleza.",
            "Tecn√≥logo innovador con alma aventurera.",
            "Esp√≠ritu libre que cree en las conexiones genuinas."
        };

        String[] profesiones = {
            "Ingeniero de Software", "M√©dico", "Abogado", "Arquitecto", "Dise√±ador Gr√°fico",
            "Contador", "Marketing Digital", "Psic√≥logo", "Periodista", "Chef",
            "Profesor", "Enfermero", "Dentista", "Veterinario", "Fisioterapeuta"
        };

        // Determinar g√©nero
        boolean esMasculino = random.nextBoolean();
        String nombre = esMasculino ? 
            nombresMasculinos[random.nextInt(nombresMasculinos.length)] :
            nombresFemeninos[random.nextInt(nombresFemeninos.length)];
        
        String apellido = apellidos[random.nextInt(apellidos.length)];
        String email = generarEmail(nombre, apellido, random);
        
        // Ubicaci√≥n aleatoria
        String[] ubicacion = ciudadesCol[random.nextInt(ciudadesCol.length)];
        
        // Fecha de nacimiento (18-65 a√±os)
        int edad = 18 + random.nextInt(47);
        LocalDate fechaNacimiento = LocalDate.now().minusYears(edad)
            .minusDays(random.nextInt(365));

        User user = User.builder()
            .name(nombre)
            .lastName(apellido)
            .email(email)
            .password(passwordEncoder.encode("123456")) // Contrase√±a fija para testing
            .verified(true) // Todos verificados para testing
            .userRole(clientRole)
            .userAuthProvider(UserAuthProvider.LOCAL)
            .createdAt(LocalDateTime.now().minusDays(random.nextInt(365)))
            .updatedAt(LocalDateTime.now())
            .dateOfBirth(fechaNacimiento)
            .country(ubicacion[0])
            .city(ubicacion[1])
            .department(ubicacion[2])
            .phone(generarTelefono(random))
            .phoneCode("+57")
            .document(generarDocumento(random))
            .description(descripciones[random.nextInt(descripciones.length)])
            .profession(profesiones[random.nextInt(profesiones.length)])
            .height(150 + random.nextInt(50)) // 150-200 cm
            .profileViews(random.nextLong(1000))
            .likesReceived(random.nextLong(100))
            .matchesCount(random.nextLong(50))
            .popularityScore(random.nextDouble() * 100)
            .showMeInSearch(random.nextDouble() < 0.9) // 90% visible
            .allowNotifications(random.nextDouble() < 0.8) // 80% notificaciones
            .showAge(random.nextDouble() < 0.85)
            .showLocation(random.nextDouble() < 0.9)
            .showPhone(random.nextDouble() < 0.3)
            .agePreferenceMin(Math.max(18, edad - 10))
            .agePreferenceMax(Math.min(65, edad + 15))
            .locationPreferenceRadius(random.nextInt(3) == 0 ? 50 : 25) // 25km o 50km
            .build();

        // Asignar categor√≠a de inter√©s
        if (!categories.isEmpty()) {
            user.setCategoryInterest(categories.get(random.nextInt(categories.size())));
        }

        // Asignar atributos f√≠sicos
        if (!genders.isEmpty()) {
            user.setGender(genders.get(random.nextInt(genders.size())));
        }
        if (!eyeColors.isEmpty()) {
            user.setEyeColor(eyeColors.get(random.nextInt(eyeColors.size())));
        }
        if (!hairColors.isEmpty()) {
            user.setHairColor(hairColors.get(random.nextInt(hairColors.size())));
        }
        if (!bodyTypes.isEmpty()) {
            user.setBodyType(bodyTypes.get(random.nextInt(bodyTypes.size())));
        }

        // NO asignar tags aqu√≠ para evitar errores de detached entities
        // Los tags se asignar√°n despu√©s de guardar el usuario

        // Im√°genes de perfil (simuladas)
        List<String> imagenes = new ArrayList<>();
        int numImagenes = 1 + random.nextInt(4); // 1-4 im√°genes
        for (int i = 0; i < numImagenes; i++) {
            imagenes.add("https://picsum.photos/400/600?random=" + (random.nextInt(10000) + i));
        }
        user.setImages(imagenes);

        return user;
    }

    private String generarEmail(String nombre, String apellido, Random random) {
        String nombreLimpio = nombre.toLowerCase()
            .replace("√°", "a").replace("√©", "e").replace("√≠", "i")
            .replace("√≥", "o").replace("√∫", "u");
        String apellidoLimpio = apellido.toLowerCase()
            .replace("√°", "a").replace("√©", "e").replace("√≠", "i")
            .replace("√≥", "o").replace("√∫", "u");
        
        String[] dominios = {"gmail.com", "hotmail.com", "yahoo.com", "outlook.com", "test.com"};
        String dominio = dominios[random.nextInt(dominios.length)];
        
        String[] patrones = {
            nombreLimpio + "." + apellidoLimpio,
            nombreLimpio + apellidoLimpio,
            nombreLimpio.charAt(0) + apellidoLimpio,
            nombreLimpio + "." + apellidoLimpio + (random.nextInt(99) + 1),
            nombreLimpio + (random.nextInt(999) + 10)
        };
        
        String patron = patrones[random.nextInt(patrones.length)];
        return patron + "@" + dominio;
    }

    private String generarTelefono(Random random) {
        String[] prefijos = {"301", "302", "310", "311", "312", "313", "314", "315", "316", "317", "318", "319", "320", "321", "322", "323"};
        String prefijo = prefijos[random.nextInt(prefijos.length)];
        StringBuilder numero = new StringBuilder(prefijo);
        
        for (int i = 0; i < 7; i++) {
            numero.append(random.nextInt(10));
        }
        
        return numero.toString();
    }

    private String generarDocumento(Random random) {
        StringBuilder documento = new StringBuilder();
        int longitud = 8 + random.nextInt(3); // 8-10 d√≠gitos
        
        for (int i = 0; i < longitud; i++) {
            documento.append(random.nextInt(10));
        }
        
        return documento.toString();
    }
}
